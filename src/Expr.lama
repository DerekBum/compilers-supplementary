-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  var result = case expr of
    Assn (e1, e2) -> case evalList (c, {e1, e2}) of
      [[s, w], {x, v}] -> [[s <- [x, v], w], v]
    esac
  | Seq (e1, e2) -> eval (eval (c, e1).fst, e2)
  | Skip -> [c, Void]
  | Read (v) -> (
        var wA = readWorld (w);
        [[s <- [v, wA.fst], wA.snd], Void]
      )
  | Write (v) -> case eval (c, v) of
      [[s, w], x] -> [[s, writeWorld (x, w)], Void]
    esac
  | If (e, t, f) -> case eval (c, e) of 
      [c@[s, w], 0] -> eval (c, f)
    | [c@[s, w], _] -> eval (c, t)
    esac
  | While (e, s) -> case eval (c, e) of
      [c, 0] -> [c, Void]
    | [c, _] -> eval (c, Seq (s, While (e, s)))
    esac
  | DoWhile (s, e) -> eval (c, Seq (s, While (e, s)))
  | Var (x) -> [c, s (x)]
  | Ref (x) -> [c, x]
  | Const (n) -> [c, n]
  | Binop (op, expr1, expr2) -> (
      var res1 = eval (c, expr1);
      var res2 = eval (res1.fst, expr2);
      [res2.fst, evalOp (op, res1.snd, res2.snd)]
    )
  | Ignore (e) -> (
      var res = eval (c, e);
      [res.fst, Void] 
    )
  esac;
  result
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}

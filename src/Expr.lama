-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Scope   (def list, expr)     |
--        Call    (string, expr list)  |
--        Ignore  (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Var (string list)                |
--       Fun (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun addDef (st, def) {
  case def of 
    Var (ds) -> addNames (st, ds)
  | Fun (name, args, body) -> addFunction (st, name, args, body)
  esac
}

fun addDefs (st, defs) {
    case defs of 
      d : defs -> addDefs (addDef (st, d), defs)
    | _ -> st
    esac
}

(* Assignment *)
fun eval (c@[s, w], expr) {
  var result = case expr of
    Assn (e1, e2) -> case evalList (c, {e1, e2}) of
      [[s, w], x : v : _] -> [[s <- [x, Var (v)], w], v]
    esac
  | Seq (e1, e2) -> case evalList (c, {e1, e2}) of 
          [c, v1:v2:t] -> [c, v2]
        esac
  | Skip -> [c, Void]
  | Read (v) -> (
        var wA = readWorld (w);
        [[s <- [v, Var (wA.fst)], wA.snd], Void]
      )
  | Write (v) -> case eval (c, v) of
      [c, x] -> [[s, writeWorld (x, w)], Void]
    esac
  | If (e, t, f) -> case eval (c, e) of 
      [c@[s, w], 0] -> eval (c, f)
    | [c@[s, w], _] -> eval (c, t)
    esac
  | While (e, s) -> case eval (c, e) of
      [c, 0] -> [c, Void]
    | [c, _] -> eval (c, Seq (s, While (e, s)))
    esac
  | DoWhile (s, e) -> eval (c, Seq (s, While (e, s)))
  | Var (x) -> [c, case lookup (s, x) of Var (v) -> v esac]
  | Ref (x) -> [c, x]
  | Const (n) -> [c, n]
  | Binop (op, expr1, expr2) -> (
      var res1 = eval (c, expr1);
      var res2 = eval (res1.fst, expr2);
      [res2.fst, evalOp (op, res1.snd, res2.snd)]
    )
  | Ignore (e) -> (
      var res = eval (c, e);
      [res.fst, Void] 
    )
  | Scope (l, e) -> 
      case eval ([addDefs (enterScope (s), l), w], e) of 
        [[s, w], v] -> [[leaveScope (s), w], v]
      esac
  | Call (n, expList) ->
      case checkFun(s, n) of
          _ -> case lookup(s, n) of 
              Fun (args, body) ->
                case evalList (c, expList) of
                  [[s, _], values] ->
                    case foldl (fun(s, [arg, v]) { s.addName (arg, Var (v)) }, enterFunction (s), zip (args, values)) of 
                      stBegin -> 
                        case eval ([stBegin, w], body) of
                          [[stEnd, w], v] -> [[leaveFunction (s, getGlobal (stEnd)), w], v]
                        esac
                    esac
                esac
            esac 
        esac
  esac;
  result
}
(* End *)

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}

-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }

  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  fun oldEval (c@[stack, state, world], insns) {
    case insns of 
    {} -> c
    | BINOP (op) : tail -> case stack of
        y:x:rest -> eval (env, [evalOp (op, x, y) : rest, state, world], tail)
      esac
    | CONST (n) : tail -> eval (env, [n : stack, state, world], tail)
    | READ : tail -> (
      var worldAfter = readWorld (world);
      var z = worldAfter.fst;
      eval (env, [z : stack, state, worldAfter.snd], tail)
    )
    | WRITE : tail -> case stack of
        z:rest -> eval (env, [rest, state, writeWorld (z, world)], tail)
      esac
    | LD (x) : tail -> eval (env, [state (x) : stack, state, world], tail)
    | LDA (x) : tail -> eval (env, [x : stack, state, world], tail)
    | ST (x) : tail -> case stack of
        z:rest -> eval (env, [rest, state <- [x, z], world], tail)
      esac
    | STI : tail -> case stack of
        v : r : rest -> eval (env, [v : rest, state <- [r, v], world], tail)
      esac
    | LABEL (s) : tail -> eval (env, c, tail)
    | JMP (l) : tail -> eval (env, c, fromLabel (env, l))
    | CJMP (c, l) : tail -> case c of
        "z" -> case stack of
            z : rest -> case z of
                0 -> eval (env, [rest, state, world], fromLabel (env, l))
              | _ -> eval (env, [rest, state, world], tail)
              esac
          esac
      | "nz" -> case stack of
            z : rest -> case z of
                0 -> eval (env, [rest, state, world], tail)
              | _ -> eval (env, [rest, state, world], fromLabel (env, l))
              esac
          esac
      esac
    | DUP : tail -> case stack of
        x : _ -> eval (env, [x : stack, state, world], tail)
      esac
    | DROP : tail -> case stack of
        _ : rest -> eval (env, [rest, state, world], tail)
      esac
    esac
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
  fun eval (c@[st, cst, s, w], insns) {
    fun createLocal (st, args, locs) {
      case take (st, args) of
        [st, vs] -> case foldl (
          fun ([state, number], v) {
            state.assign (Arg (number), v);
            [state, number + 1]
          }, [makeState (args, locs), 0], vs) of
            [state, _] -> [st, state]
        esac
      esac
    }
    
    case insns of
      {} -> c
    | BINOP (op) : tail -> case st of
        y:x:rest -> eval ([evalOp (op, x, y) : rest, cst, s, w], tail)
      esac
    | CONST (n) : tail -> eval ([n : st, cst, s, w], tail)
    | READ : tail -> (
      var worldAfter = readWorld (w);
      var z = worldAfter.fst;
      eval ([z : st, cst, s, worldAfter.snd], tail)
    )
    | WRITE : tail -> case st of
        z:rest -> eval ([rest, cst, s, writeWorld (z, w)], tail)
      esac
    | LD (x) : tail -> eval ([lookup (s, x) : st, cst, s, w], tail)
    | LDA (x) : tail -> eval ([x : st, cst, s, w], tail)
    | ST (x) : tail -> case st of
        z:_ -> s.assign (x, z); eval(c, tail)
      esac
    | STI : tail -> case st of
        v : r : rest -> s.assign (r, v); eval ([v : rest, cst, s, w], tail)
      esac
    | LABEL (_) : tail -> eval (c, tail)
    | JMP (l) : tail -> eval (c, fromLabel (env, l))
    | CJMP (c, l) : tail -> case c of
        "z" -> case st of
            z : rest -> case z of
                0 -> eval ([rest, cst, s, w], fromLabel (env, l))
              | _ -> eval ([rest, cst, s, w], tail)
              esac
          esac
      | "nz" -> case st of
            z : rest -> case z of
                0 -> eval ([rest, cst, s, w], tail)
              | _ -> eval ([rest, cst, s, w], fromLabel (env, l))
              esac
          esac
      esac
    | DUP : tail -> case st of
        x : _ -> eval ([x : st, cst, s, w], tail)
      esac
    | DROP : tail -> case st of
        _ : rest -> eval ([rest, cst, s, w], tail)
      esac
    | GLOBAL (x) : tail -> s.assign (Glb (x), 0); eval(c, tail)
    | BEGIN (_, args, locs) : tail -> case createLocal (st, args, locs) of
        [st, s] -> eval ([st, cst, s, w], tail)
      esac
    | END : tail -> case cst of 
        [old, ins] : cst -> eval ([st, cst, old, w], ins)
      | {} -> c
      esac
    | CALL (name, _) : tail -> eval ([st, [s, tail] : cst, s, w], fromLabel (env, name))
    esac
  }
  (* End *)

  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }

  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for code generation:
--    a. generate the code for the topmost expression (the program itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun addFuns (fs, env) {
    foldl (
      fun (env, Fun (label, args, body)) {
        rememberFun (env, label, args, body)
      }, env, fs)
  }

  fun addGlobal (env, vs) {
    if isGlobal (env) then
      foldl (
        fun (code, v) {
          code <+ GLOBAL (v)
        }, emptyBuffer(), vs)
    else emptyBuffer()
    fi
  }

  fun addDefs (env, defs) {
    foldl (
      fun ([fs, env, code], def) {
        case def of
          Var (ds) -> [fs, addVars (env, ds), code <+> addGlobal (env, ds)]
          | Fun (name, args, body) -> 
            case genFunLabel (env, name) of
              [funLab, env] -> [Fun (funLab, args, body) : fs, addFun (env, name, funLab, size (args)), code]
            esac
        esac
      }, [{}, env, emptyBuffer ()], defs)
  }

  fun compileArgs (aLab, env, args) {
    compile (aLab, env, foldl (
      fun (stmt, arg) {
        Seq (stmt, arg)
      }, Skip, args))
  }

  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (lookupVar (env, x)))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (lookupVar (env, x)))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Binop  (op, e1, e2) -> 
        case env.genLabel of
          [e2Lab, env] ->
             case env.genLabel of
                [e1Lab, env] -> case compile (e1Lab, env, e1) of
                   [e1LabUsed, env, e1Code] -> case compile (e2Lab, env, e2) of
                      [e2LabUsed, env, e2Code] -> [false, env, e1Code <+> label (e1Lab, e1LabUsed) <+> e2Code <+> label (e2Lab, e2LabUsed) <+ BINOP (op)]
                   esac
                esac
             esac
        esac
    | Read   (x)          -> [false, env, singletonBuffer (READ) <+ ST (lookupVar (env, x)) <+ DROP]
    | Write  (e)          -> 
        case env.genLabel of
           [lab, env] ->
              case compile (lab, env, e) of
                 [labUsed, env, eCode] -> [false, env, eCode <+> label (lab, labUsed) <+ WRITE]
              esac
        esac
    | Assn   (x, e)       -> 
        case env.genLabel of
          [eLab, env] ->
             case env.genLabel of
                [xLab, env] -> case compile (xLab, env, x) of
                   [xLabUsed, env, xCode] -> case compile (eLab, env, e) of
                      [eLabUsed, env, eCode] -> [false, env, xCode <+> label (xLab, xLabUsed) <+> eCode <+> label (eLab, eLabUsed) <+ STI]
                   esac
                esac
             esac
        esac
    | Seq (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If (e, s1, s2) -> 
        case env.genLabels (3) of
           [s1Lab, s2Lab, eLab, env] -> 
              case compile(s2Lab, env, s2) of
                 [s2LabUsed, env, s2Code] ->
                    case compile(lab, env, s1) of
                       [_, env, s1Code] -> 
                          case compile(eLab, env, e) of
                             [eLabUsed, env, eCode] -> [true, env, eCode <+> label (eLab, eLabUsed) <+ CJMP ("nz", s1Lab) <+> s2Code <+> label (s2Lab, s2LabUsed) <+ JMP (lab) <+ LABEL (s1Lab) <+> s1Code]
                          esac
                    esac
              esac
        esac
    | While (e, s) -> 
         case env.genLabels (2) of
            [eLab, sLab, env] -> 
               case compile (sLab, env, e) of
                  [sLabUsed, env, eCode] -> 
                     case compile (eLab, env, s) of
                        [_, env, sCode] -> [true, env, label (eLab, true) <+> eCode <+> label (sLab, sLabUsed) <+ CJMP ("z", lab) <+> sCode <+ JMP (eLab)]
                     esac
               esac 
         esac
    | DoWhile (s, e) ->
        case env.genLabels (3) of
            [eLab, sLab, afterLab, env] -> 
               case compile (afterLab, env, e) of
                  [afterLabUsed, env, eCode] -> 
                     case compile (eLab, env, s) of
                        [eLabUsed, env, sCode] -> [true, env, label (sLab, true) <+> sCode <+> label (eLab, eLabUsed) <+> eCode <+> label (afterLab, afterLabUsed) <+ CJMP ("z", lab) <+ JMP (sLab)]
                     esac
               esac 
         esac
    | Ignore (e) -> case compile (Lab, env, e) of
          [eLabUsed, env, eCode] -> [eLabUsed, env, eCode <+ DROP]
      esac

    | Call (name, args) -> case lookupFun (env, name) of
          Fun (lab, nas) -> case genLabel (env) of
              [aLab, env] -> case compileArgs (aLab, env, args) of 
                [aLabUsed, env, aCode] -> [false, env, aCode <+> label (aLab, aLabUsed) <+ CALL (lab, nas)]
              esac 
          esac
      esac
    | Scope (ds, e) -> case beginScope (env) of
        env -> case addDefs (env, ds) of
            [fs, env, dCode] -> case genLabel (addFuns (fs, env)) of
                [lab, env] -> case compile (lab, env, e) of
                    [labUsed, env, code] -> [false, endScope (env), dCode <+> code <+> label (lab, labUsed)]
                esac
            esac
        esac
      esac
    esac
  }

  fun genFun(env, Fun (name, args, body, state)) {
      case genLabel(env) of
        [lab, env] ->
          case compile (lab, addArgs(beginFun(env, state), args), body) of
            [labUsed, env, code] -> [env,
              singletonBuffer(LABEL(name))
              <+ BEGIN(name, size(args), getLocals(env)) 
              <+> code
              <+> label (lab, labUsed)
              <+ END]
          esac
      esac
  }

  fun genFuns (funs, envE) {
    case funs of
      func : oFuns -> 
        case genFun (envE, func) of [env, fCode] ->
            case getFuns (env) of [iFuns, envE] ->
                case genFuns (iFuns +++ oFuns, envE) of
                  [fsCode, env] -> [fCode <+> fsCode, env]
                esac 
            esac
        esac 
      | {} -> [emptyBuffer (), envE]
    esac
  }
  case initCompEnv ().genLabel of [endLab, env] ->
      case compile (endLab, env, stmt) of [endLabUsed, env, code] ->
          case getFuns (env) of [funs, envE] ->
              case genFuns(funs, envE) of 
                [codeFuns, _] -> getBuffer $ singletonBuffer(LABEL("main")) <+ BEGIN("main", 0, getLocals(env)) <+> code <+> label (endLab, endLabUsed) <+ END  <+> codeFuns
              esac
          esac
      esac
  esac
}


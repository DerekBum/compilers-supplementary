-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c, stmt) {
  case stmt of
    Skip -> c
  | Seq (st1, st2) -> eval (eval (c, st1), st2)
  | Write (expr) -> [c.fst, writeWorld (evalExpr(c.fst, expr), c.snd)]
  | Read (s) -> (
    var worldAfter = readWorld (c.snd);
    var z = worldAfter.fst;
    [c.fst <- [s, z], worldAfter.snd]
  )
  | Assn (s, expr) -> [c.fst <- [s, evalExpr (c.fst, expr)], c.snd]
  | If (e, s1, s2) -> if evalExpr (c.fst, e) then eval (c, s1) else eval (c, s2) fi
  | While (e, s) -> if evalExpr (c.fst, e) then eval (eval (c, s), While (e, s)) else c fi
  | DoWhile (s, e) -> (
      var condAfter = eval (c, s);
      if evalExpr (condAfter.fst, e) then eval (condAfter, DoWhile (s, e)) else condAfter fi
    )
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}

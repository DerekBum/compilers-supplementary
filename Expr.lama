-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  var result = case expr of
    Const (n) -> n
  | Var (x) -> st (x)
  | Binop (op, expr1, expr2) -> (
      var a = evalExpr (st, expr1);
      var b = evalExpr (st, expr2);
      case op of
        "+" -> a + b
      | "-" -> a - b
      | "*" -> a * b
      | "/" -> a / b
      | "%" -> a % b
      | "<" -> a < b
      | ">" -> a > b
      | "<=" -> a <= b
      | ">=" -> a >= b
      | "==" -> a == b
      | "!=" -> a != b
      | "&&" -> a && b
      | "!!" -> a !! b
      esac
    )
  esac;
  result
}
